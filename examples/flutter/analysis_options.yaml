include: package:lint/analysis_options.yaml

analyzer:
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  errors:
    missing_required_param: warning
    missing_return: warning
  exclude:
    - lib/injection/modules.config.dart
linter:
  rules:
    avoid_classes_with_only_static_members: false
    omit_local_variable_types: false
    prefer_single_quotes: false
    lowercase_with_underscores: false
    always_declare_return_types: true
    always_use_package_imports: true
    annotate_overrides: true
    avoid_escaping_inner_quotes: true
    avoid_function_literals_in_foreach_calls: true
    avoid_implementing_value_types: true
    avoid_init_to_null: true
    # https://dart-lang.github.io/linter/lints/avoid_null_checks_in_equality_operators.html
    avoid_null_checks_in_equality_operators: true
    # https://dart-lang.github.io/linter/lints/avoid_return_types_on_setters.html
    avoid_return_types_on_setters: true
    # https://dart-lang.github.io/linter/lints/avoid_returning_null_for_future.html
    avoid_returning_null_for_future: true
    # Use empty returns, don't show off with you knowledge about dart internals.
    # https://dart-lang.github.io/linter/lints/avoid_returning_null_for_void.html
    avoid_returning_null_for_void: true
    # Prevents logical inconsistencies. It's good practice to define getters for all existing setters.
    # https://dart-lang.github.io/linter/lints/avoid_setters_without_getters.html
    avoid_setters_without_getters: true
    # A single cascade operator can be replaced with a normal method call
    # https://dart-lang.github.io/linter/lints/avoid_single_cascade_in_expression_statements.html
    avoid_single_cascade_in_expression_statements: true
    # Don't reuse a type parameter when on with the same name already exists in the same scope
    # https://dart-lang.github.io/linter/lints/avoid_shadowing_type_parameters.html
    avoid_shadowing_type_parameters: true
    # Don't use a parameter names which can be confused with a types (i.e. int, bool, num, ...)
    # https://dart-lang.github.io/linter/lints/avoid_types_as_parameter_names.html
    avoid_types_as_parameter_names: true
    # Containers without parameters have no effect and can be removed
    # https://dart-lang.github.io/linter/lints/avoid_unnecessary_containers.html
    avoid_unnecessary_containers: true
    # Unused parameters should be removed
    # https://dart-lang.github.io/linter/lints/avoid_unused_constructor_parameters.html
    avoid_unused_constructor_parameters: true
    # Use the await keyword only for futures. There is nothing to await in synchronous code
    # https://dart-lang.github.io/linter/lints/await_only_futures.html
    await_only_futures: true
    # https://dart-lang.github.io/linter/lints/cancel_subscriptions.html
    cancel_subscriptions: true
    # Prevents hard to debug code
    # https://dart-lang.github.io/linter/lints/control_flow_in_finally.html
    control_flow_in_finally: true
    # Single line `if`s are fine, but when a new line splits the bool expression and body curly braces
    # are recommended. It prevents the danging else problem and easily allows the addition of more lines inside
    # the if body
    # https://dart-lang.github.io/linter/lints/curly_braces_in_flow_control_structures.html
    curly_braces_in_flow_control_structures: true
    # Follows dart style. Fully supported by IDEs and no manual effort for a consistent style
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/directives_ordering.html
    directives_ordering: true
    # Removed empty constructor bodies
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/empty_constructor_bodies.html
    empty_constructor_bodies: true
    # Don't allow empty if bodies. Works together with curly_braces_in_flow_control_structures
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/empty_statements.html
    empty_statements: true
    # Enums aren't powerful enough, now enum like classes get the same linting support
    # Dart SDK: >= 2.9.0-12.0.dev • (Linter v0.1.116)
    # https://dart-lang.github.io/linter/lints/exhaustive_cases.html
    exhaustive_cases: true
    # Follow dart file naming schema
    # https://dart-lang.github.io/linter/lints/file_names.html
    file_names: true
    # hashCode and equals need to be consistent. One can't live without another.
    # https://dart-lang.github.io/linter/lints/hash_and_equals.html
    hash_and_equals: true
    # Type check for Iterable<T>.contains(other) where other is! T
    # otherwise contains will always report false. Those errors are usually very hard to catch.
    # https://dart-lang.github.io/linter/lints/iterable_contains_unrelated_type.html
    iterable_contains_unrelated_type: true
    # Hint to join return and assignment.
    # https://dart-lang.github.io/linter/lints/join_return_with_assignment.html
    join_return_with_assignment: false
    # Follow dart style
    # https://dart-lang.github.io/linter/lints/library_prefixes.html
    library_prefixes: true
    # Type check for List<T>.remove(item) where item is! T
    # The list can't contain item. Those errors are not directly obvious especially when refactoring.
    # https://dart-lang.github.io/linter/lints/list_remove_unrelated_type.html
    list_remove_unrelated_type: true
    # Don't forget the whitespaces at the end
    # Dart SDK: >= 2.8.0-dev.10.0 • (Linter v0.1.110)
    # https://dart-lang.github.io/linter/lints/missing_whitespace_between_adjacent_strings.html
    missing_whitespace_between_adjacent_strings: true
    # Concat Strings obviously with `+` inside a list.
    # https://dart-lang.github.io/linter/lints/no_adjacent_strings_in_list.html
    no_adjacent_strings_in_list: true
    # Second case is basically dead code which will never be reached.
    # https://dart-lang.github.io/linter/lints/no_duplicate_case_values.html
    no_duplicate_case_values: true
    # Flutter only: `createState` shouldn't pass information into the state
    # https://dart-lang.github.io/linter/lints/no_logic_in_create_state.html
    no_logic_in_create_state: true
    # Follow dart style naming conventions
    # https://dart-lang.github.io/linter/lints/non_constant_identifier_names.html
    non_constant_identifier_names: true
    # Might become irrelevant when non-nullable types land in dart. Until then use this lint check which checks for
    # non null arguments for specific dart sdk methods.
    # https://dart-lang.github.io/linter/lints/null_closures.html
    null_closures: true
    # Highlights unintentionally overridden fields.
    # https://dart-lang.github.io/linter/lints/overridden_fields.html
    overridden_fields: true
    # Follow dart style package naming convention
    # https://dart-lang.github.io/linter/lints/package_names.html
    # - package_names
    # Most likely a mistake, if not: bad practice
    # Not compatible with NNBD
    # https://dart-lang.github.io/linter/lints/parameter_assignments.html
    parameter_assignments: true
    # Makes it easier to migrate to const constructors and to have final fields
    # https://dart-lang.github.io/linter/lints/prefer_asserts_in_initializer_lists.html
    prefer_asserts_in_initializer_lists: true
    # Use the ??= operator when possible
    # https://dart-lang.github.io/linter/lints/prefer_conditional_assignment.html
    prefer_conditional_assignment: true
    # Always use const when possible, make runtime faster
    # https://dart-lang.github.io/linter/lints/prefer_const_constructors.html
    prefer_const_constructors: true
    # Add a const constructor when possible
    # https://dart-lang.github.io/linter/lints/prefer_const_constructors_in_immutables.html
    prefer_const_constructors_in_immutables: true
    # final is good, const is better
    # https://dart-lang.github.io/linter/lints/prefer_const_declarations.html
    prefer_const_declarations: true
    # Always use const when possible, make runtime faster
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_const_literals_to_create_immutables.html
    prefer_const_literals_to_create_immutables: true
    # Dart has named constructors. Static methods in other languages (java) are a workaround which don't have
    # named constructors.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_constructors_over_static_methods.html
    prefer_constructors_over_static_methods: true
    # Contains may be faster and is easier to read
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_contains.html
    prefer_contains: true
    # Prevent confusion with call-side when using named parameters
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_equal_for_default_values.html
    prefer_equal_for_default_values: true
    # Avoid accidental reassignments and allows the compiler to do optimizations.
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_final_fields.html
    prefer_final_fields: true
    # Helps avoid accidental reassignments and allows the compiler to do optimizations.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_final_in_for_each.html
    prefer_final_in_for_each: true
    # Helps avoid accidental reassignments and allows the compiler to do optimizations.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_final_locals.html
    prefer_final_locals: true
    # Saves lot of code
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_for_elements_to_map_fromIterable.html
    prefer_for_elements_to_map_fromIterable: true
    # As Dart allows local function declarations, it is a good practice to use them in the place of function literals.
    # https://dart-lang.github.io/linter/lints/prefer_function_declarations_over_variables.html
    prefer_function_declarations_over_variables: true
    # Allows potential usage of const
    # https://dart-lang.github.io/linter/lints/prefer_if_elements_to_conditional_expressions.html
    prefer_if_elements_to_conditional_expressions: true
    # Dart has a special operator for this, use it
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_if_null_operators.html
    prefer_if_null_operators: true
    # Terser code
    # https://dart-lang.github.io/linter/lints/prefer_initializing_formals.html
    prefer_initializing_formals: true
    # Easier move towards const, and way easier to read
    # https://dart-lang.github.io/linter/lints/prefer_inlined_adds.html
    prefer_inlined_adds: true
    # Iterables do not necessary know their length
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_is_empty.html
    prefer_is_empty: true
    # Easier to read
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_is_not_empty.html
    prefer_is_not_empty: true
    # Use the `foo is! Foo` instead of `!(foo is Foo)`
    # https://dart-lang.github.io/linter/lints/prefer_is_not_operator.html
    prefer_is_not_operator: true
    # Easier to read
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_iterable_whereType.html
    prefer_iterable_whereType: true
    # Makes expressions with null checks easier to read.
    # https://github.com/flutter/flutter/pull/32711#issuecomment-492930932
    prefer_null_aware_operators: true
    # Allows potential usage of const
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_spread_collections.html
    prefer_spread_collections: true
    # Define types
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_typing_uninitialized_variables.html
    prefer_typing_uninitialized_variables: true
    # Null is not a type, use void
    # https://dart-lang.github.io/linter/lints/prefer_void_to_null.html
    prefer_void_to_null: true
    # Hints accidental recursions
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/recursive_getters.html
    recursive_getters: true
    # Flutter only, prefer SizedBox over Container which offers a const constructors
    # Dart SDK: >= 2.9.0-4.0.dev • (Linter v0.1.115)
    # https://dart-lang.github.io/linter/lints/sized_box_for_whitespace.html
    sized_box_for_whitespace: true
    # Flutter only, always put child last
    # https://dart-lang.github.io/linter/lints/sort_child_properties_last.html
    sort_child_properties_last: true
    # Any sorting is better than no sorting
    # https://dart-lang.github.io/linter/lints/sort_pub_dependencies.html
    sort_pub_dependencies: true
    # Default constructor comes first.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/sort_unnamed_constructors_first.html
    sort_unnamed_constructors_first: true
    # First test, then cast
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/test_types_in_equals.html
    test_types_in_equals: true
    # Hard to debug and bad style
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/throw_in_finally.html
    throw_in_finally: true
    # Type annotations make the compiler intelligent, use them
    # https://dart-lang.github.io/linter/lints/type_annotate_public_apis.html
    type_annotate_public_apis: true
    # Don't add types for already typed constructor parameters.
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/type_init_formals.html
    type_init_formals: true
    # Remove async/await clutter when not required
    # https://dart-lang.github.io/linter/lints/unnecessary_await_in_return.html
    unnecessary_await_in_return: true
    # Remove unnecessary braces
    # https://dart-lang.github.io/linter/lints/unnecessary_brace_in_string_interps.html
    unnecessary_brace_in_string_interps: true
    # Yes, const everywhere. But not in an already const scope
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unnecessary_const.html
    unnecessary_const: true
    # Getter/setters can be added later on in a non API breaking manner
    # https://dart-lang.github.io/linter/lints/unnecessary_getters_setters.html
    unnecessary_getters_setters: true
    # Remove the optional `new` keyword
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unnecessary_new.html
    unnecessary_new: true
    # Don't assign `null` when value is already `null`.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/unnecessary_null_aware_assignments.html
    unnecessary_null_aware_assignments: true
    # Don't assign `null` when value is already `null`.
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unnecessary_null_in_if_null_operators.html
    unnecessary_null_in_if_null_operators: true
    # Remove overrides which simply call super
    # https://dart-lang.github.io/linter/lints/unnecessary_overrides.html
    unnecessary_overrides: true
    # Remove clutter where possible
    # https://dart-lang.github.io/linter/lints/unnecessary_parenthesis.html
    unnecessary_parenthesis: true
    # Use raw string only when needed
    # Dart SDK: >= 2.8.0-dev.11.0 • (Linter v0.1.111)
    # https://dart-lang.github.io/linter/lints/unnecessary_raw_strings.html
    unnecessary_raw_strings: true

    # Avoid magic overloads of + operators
    # https://dart-lang.github.io/linter/lints/unnecessary_statements.html
    unnecessary_statements: true

    # Remove unnecessary escape characters
    # Dart SDK: >= 2.8.0-dev.11.0 • (Linter v0.1.111)
    # https://dart-lang.github.io/linter/lints/unnecessary_string_escapes.html
    unnecessary_string_escapes: true

    # Especially with NNBD a no-brainer
    # Dart SDK: >= 2.8.0-dev.10.0 • (Linter v0.1.110)
    # https://dart-lang.github.io/linter/lints/unnecessary_string_interpolations.html
    unnecessary_string_interpolations: true

    # The variable is clear, remove clutter
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unnecessary_this.html
    unnecessary_this: true

    # Highlights potential bugs where unrelated types are compared with another. (always *not* equal).
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unrelated_type_equality_checks.html
    unrelated_type_equality_checks: true
    # Always use hex syntax Color(0x00000001), never Color(1)
    # https://dart-lang.github.io/linter/lints/use_full_hex_values_for_flutter_colors.html
    use_full_hex_values_for_flutter_colors: true
    # Always use generic function type syntax, don't mix styles
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/use_function_type_syntax_for_parameters.html
    use_function_type_syntax_for_parameters: true
    # Use rethrow to preserve the original stacktrace.
    # https://dart.dev/guides/language/effective-dart/usage#do-use-rethrow-to-rethrow-a-caught-exception
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/use_rethrow_when_possible.html
    use_rethrow_when_possible: true
    # Catches invalid regular expressions.
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/valid_regexps.html
    valid_regexps: true

    # Don't assign anything to void
    # https://dart-lang.github.io/linter/lints/void_checks.html
    void_checks: true
